{"componentChunkName":"component---src-templates-blog-post-js","path":"/vi/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"d2d546f8-495a-5f53-9c33-ce6fadc10a30","html":"<p>Tôi đã nghe <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> là một thứ mới nóng bỏng. Cơ mà, tôi muốn bắt đầu bài viết này bằng cách nói về điều thú vị của <em>class</em> components.</p>\n<p><strong>Những vấn đề này <em>không</em> quan trọng cho việc sử dụng React một cách hiệu quả. Nhưng bạn sẽ cảm thấy chúng thú vị nếu như bạn muốn tìm hiểu sâu hơn về cách hoạt động của chúng.</strong></p>\n<p>Đây là bài đầu tiên.</p>\n<hr>\n<p>Tôi đã viết <code class=\"language-text\">super(props)</code> rất nhiều lần hơn là tôi biết:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dĩ nhiên, nếu áp dụng <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> thì có thể bỏ qua chúng:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cú pháp như thế này <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã lên kế hoạch</a> khi React 0.13 đã hỗ trợ cho một lớp đơn giản trong năm 2015. Định nghĩa <code class=\"language-text\">constructor</code> khi gọi <code class=\"language-text\">super(props)</code> luôn được dự định tạm thời cho đến khi các thuộc tính của lớp cung cấp một sự thay thế tốt hơn.</p>\n<p>Nhưng hãy quay về ví dụ trước khi chỉ sử dụng các tính năng của ES2015:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Tại sao chúng ta lại gọi <code class=\"language-text\">super</code>? Chúng ta có thể <em>không</em> gọi chúng được không? Nếu chúng ta gọi chúng, thì chuyện gì sẽ xảy ra nếu chúng ta không trả cho nó <code class=\"language-text\">props</code>? Chúng ta có thể cho nó các tham số khác được không?</strong> Cùng tìm hiểu nào.</p>\n<hr>\n<p>Trong JavaScript, <code class=\"language-text\">super</code> để gọi lại constructor của lớp cha. (Trong ví dụ của chúng ta, đấy chính là lớp <code class=\"language-text\">React.Component</code>.)</p>\n<p>Điều quan trọng, bạn không thể sử dụng <code class=\"language-text\">this</code> trong constructor cho đến lúc <em>sau khi</em> bạn gọi đến constructor của lớp tra. JavaScript sẽ không để bạn làm việc này:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴  Không thể dùng `this` được</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Giờ thì dùng được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Có một lý do chính đáng giải thích vì sao JavaScript phải thực hiện constructor của lớp cha trước khi đụng vào <code class=\"language-text\">this</code>. Hãy xem xét trường hợp sau:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴  Điều này không cho phép, đọc lý do ở bên dưới</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hãy tưởng tượng khi bạn dùng <code class=\"language-text\">this</code> trước <code class=\"language-text\">super</code>  <em>đã</em> chấp thuận. Một tháng sau, chúng ta đổi <code class=\"language-text\">greetColleagues</code> bao gồm có tên người đó trong lời nhắn:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tên tôi là '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', rất vui được gặp bạn!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nhưng chúng ta quên rằng <code class=\"language-text\">this.greetColleagues()</code> được gọi trước <code class=\"language-text\">super()</code> lúc mà <code class=\"language-text\">this.name</code> được thiết lập. Vì thế <code class=\"language-text\">this.name</code> chưa được định nghĩa! Lúc này bạn có thể thấy, code như thế này có thể rất khó khăn.</p>\n<p>Để tránh những điều như vậy, <strong>JavaScript chỉ định rằng nếu bạn muốn sử dụng <code class=\"language-text\">this</code> bên trong constructor, bạn <em>phải</em> gọi <code class=\"language-text\">super</code> trước.</strong> Để cho thằng cha làm việc của nó! Và điều này cũng áp dụng với các lớp React components:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Okay, dùng `this` được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta cùng đến với câu hỏi khác: phải sao phải truyền vào <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Bạn hãy nghĩ đơn giản rằng khi truyền <code class=\"language-text\">props</code> vào <code class=\"language-text\">super</code> là sự cần thiết để <code class=\"language-text\">React.Component</code> constructor có thể thiết lập <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Điều này không xa với thực tế — thật sự, đó là <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách mà chúng thực hiện</a>.</p>\n<p>Nhưng bằng cách nào đó, nếu bạn gọi <code class=\"language-text\">super()</code> mà không có tham số <code class=\"language-text\">props</code>, bạn vẫn có thể sử dụng <code class=\"language-text\">this.props</code> trong phương thức <code class=\"language-text\">render</code> và các phương thức khác. (Nếu không tin tôi, hãy tự kiểm tra xem!)</p>\n<p>Vậy <em>nó</em> hoạt động như thế nào? Hóa ra <strong>React đã gán <code class=\"language-text\">props</code> cho một instance ngay sau constructor <em>của bạn</em>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Bên trong React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thế nên khi bạn quên bỏ thằng <code class=\"language-text\">props</code> vào <code class=\"language-text\">super()</code>, thì trong React bạn vẫn có thể gọi nó sau đó. Có một lý do cho việc này.</p>\n<p>Khi React thêm sự hỗ trợ cho các lớp, nó không chỉ hỗ trợ cho các lớp mỗi phiên bản ES6. Mà mục tiêu chính là hỗ trợ nhiều phiên bản lớp nhất có thể. Nó đã <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">không rõ</a> làm thế nào để có thể ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, hoặc các giải pháp khác có thể định nghĩa  components. Vì vậy React đã cố ý không quan tâm dến việc có gọi <code class=\"language-text\">super()</code> hay không — mặc dùng đó là lớp ES6.</p>\n<p>Vậy có nghĩa là bạn có thể gọi <code class=\"language-text\">super()</code> thay vì <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Có lẽ là không bởi vì nó vẫn còn khó hiểu.</strong> Chắc chắn, React sẽ gán <code class=\"language-text\">this.props</code> <em>sau khi</em>  constructor của bạn được chạy. Nhưng <code class=\"language-text\">this.props</code> vẫn chưa được định nghĩa <em>giữa</em> việc gọi <code class=\"language-text\">super</code> và kết thúc constructor của bạn:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Bên trong code của bạn</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 Chúng ta không thả vào props nhá</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 undefined - chưa định nghĩa </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Việc debug sẽ trở nên khó khăn nếu như một vài phương thức được gọi <em>từ</em> constructor. <strong>Đó là lý do vì sao tôi khuyên khích bạn sử dụng <code class=\"language-text\">super(props)</code>, mặc dù nó không cần thiết:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Chúng ta thả props vào </span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Điều này đảm bảo <code class=\"language-text\">this.props</code> sẽ được thiết lập trong constructor.</p>\n<hr>\n<p>Có một điều cuối mà khiến cho các fan lâu năm của React tò mò.</p>\n<p>Bạn có thể thấy rằng khi sử dụng Context API bên trong các lớp (hoặc với <code class=\"language-text\">contextTypes</code> cũ ohoặc với <code class=\"language-text\">contextType</code> API được thêm vào ở React 16.6), <code class=\"language-text\">context</code> được đẩy vào tham số thứ hai trong constructor.</p>\n<p>Vậy tại sao chúng ta không viết là <code class=\"language-text\">super(props, context)</code>? Có thể chứ, nhưng context ít khi sử dụng nên việc dính vào lỗi cũng ít xuất hiện.</p>\n<p><strong>Với đề xuất thuộc tính của lớp (the class fields proposal) thì những vấn đề này hầu như biến mất.</strong> Không có constructor rõ ràng, tất cả các tham số đều được thả vào một cách tự động. Đây là những lý do cho phép một biểu thức <code class=\"language-text\">state = {}</code> bao gồm cả các tham chiếu <code class=\"language-text\">this.props</code> hoặc <code class=\"language-text\">this.context</code> nếu cần thiết.</p>\n<p>Với Hooks, chúng ta thậm chí không có <code class=\"language-text\">super</code> hoặc <code class=\"language-text\">this</code>. Nhưng chủ đề đó sẽ giành cho một ngày khác.</p>","timeToRead":6,"frontmatter":{"title":"Tại sao chúng ta phải viết super(props)?","date":"November 30, 2018","spoiler":"Có một twist ở cuối bài."},"fields":{"slug":"/vi/why-do-we-write-super-props/","langKey":"vi"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/vi/why-do-we-write-super-props/","translations":["de","fr","it","cs","es","nl","pt-br","sk","nb","tr","sr","zh-hans","zh-hant","ja","fa","my","hu","th","uk","vi"],"translatedLinks":[]}}}